import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = 'com.tfc'
version = ''
archivesBaseName = 'MinecraftEffekseerImplementation'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mc_effekseer_impl {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mc_effekseer_impl {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mc_effekseer_impl', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mc_effekseer_impl {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    extraLibs
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.16'

//    implementation fg.deobf('libs/OptiFine_1.16.5_HD_U_G7.jar')
    extraLibs files('libs/EffekSeer4J-1.0-SNAPSHOT.jar')

    configurations.compile.extendsFrom(configurations.extraLibs)

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mc_effekseer_impl",
                "Specification-Vendor"    : "GiantLuigi4",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "GiantLuigi4",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.finalizedBy('reobfJar')

task uniformJar() {
    doLast {
        String name = "/libs/" + archivesBaseName
        if (version != "null") {
            name += "-" + version;
        }
        ArrayList<String> entries = new ArrayList<>()
        File tempMergingDir = new File(name + "-Uniform.jar-merging")
        print(project.buildDir.path + name + ".jar")
        clone(new File("MEIFabric/build/libs/minecraft_effekseer_implementation-1.0-SNAPSHOT.jar"), tempMergingDir, entries)
        clone(new File("build/libs/MinecraftEffekseerImplementation.jar"), tempMergingDir, entries)
        File outputFile = new File("build/" + name + "Uniform.jar")
        outputFile.createNewFile()
        ZipOutputStream output = new ZipOutputStream(new FileOutputStream(outputFile))
        //write all the collected files into a uniform jar
        for (String entry : entries) {
            output.putNextEntry(new ZipEntry(entry))
            InputStream stream = new FileInputStream(tempMergingDir.path + "/" + entry)
            if (!entry.endsWith("dll")) {
                byte[] bytes = new byte[stream.available()]
                stream.read(bytes)
                output.write(bytes)
            } else {
                ByteArrayOutputStream stream1 = new ByteArrayOutputStream()
                int b
                while ((b = stream.read()) != -1) stream1.write(b)
                output.write(stream1.toByteArray())
                print(stream1.toByteArray().length)
                stream1.close()
                stream1.flush()
            }
            stream.close()
            output.closeEntry()
        }
        output.close()
        output.flush()
        tempMergingDir.deleteOnExit()
        tempMergingDir.deleteDir()
    }

}

//copies all entries in the zip file it's being used on to the targeted folder
void clone(File srcZip, File targ, ArrayList<String> entries) {
    File file = srcZip
    ZipFile file1 = new ZipFile(file)
    File mergingFile = new File(targ.path)
    mergingFile.mkdirs()
    for (ZipEntry entry : file1.stream().iterator()) {
        ZipEntry entry1 = entry
        if (entry.isDirectory()) continue
        if (!entries.contains(entry1.name)) entries.add(entry1.name)
        InputStream stream = file1.getInputStream(entry1)
        byte[] bytes
        if (!entry.toString().endsWith("dll")) {
            bytes = new byte[stream.available()]
            stream.read(bytes)
        } else {
            ByteArrayOutputStream stream1 = new ByteArrayOutputStream()
            int b
            while ((b = stream.read()) != -1) stream1.write(b)
            bytes = stream1.toByteArray()
            print(stream1.toByteArray().length)
            stream1.close()
            stream1.flush()
        }
        stream.close()
        File file2 = new File(targ.path + "/" + entry1.name);
        print("|Copy File With Name: " + file2.name + "\n")
        print("|Target: " + file2.path + "\n")
        file2.getParentFile().mkdirs()
        file2.createNewFile()
        FileOutputStream stream1 = new FileOutputStream(file2)
        stream1.write(bytes)
        stream1.close()
        file2.deleteOnExit()
    }
    file1.close()
}